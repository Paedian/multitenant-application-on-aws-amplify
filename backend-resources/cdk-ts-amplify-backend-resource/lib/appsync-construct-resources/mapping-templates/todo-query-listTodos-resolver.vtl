##   /* Sample code, software libraries, command line tools, proofs of concept, templates, 
## or other related technology are provided as AWS Content or Third-Party Content under 
## the AWS Customer Agreement, or the relevant written agreement between you and AWS (whichever applies). 
## You should not use this AWS Content or Third-Party Content in your production accounts, 
## or on production or other critical data. You are responsible for testing, securing, and 
## optimizing the AWS Content or Third-Party Content, such as sample code, as appropriate for 
## production grade use based on your specific quality control practices and standards. 
## Deploying AWS Content or Third-Party Content may incur AWS charges for creating or 
## using AWS chargeable resources, such as running Amazon EC2 instances or using Amazon S3 storage.*/

## Request Template ##
      #set($identity = $ctx.identity)
      #set($tenantId = $identity.claims["custom:tenantId"])
      #set($owner = $identity.claims["preferred_username"])

      #if($tenantId && $owner)
        #set($expressionValues = {})
        $util.qr($expressionValues.put(":tenantId", $util.dynamodb.toString($tenantId)))
        $util.qr($expressionValues.put(":owner", $util.dynamodb.toString($owner)))

        #set($sortDirection = $util.defaultIfNull($ctx.args.sortDirection, true))
        #set($sortValue = $ctx.args.sortValue)

        #set($oneDayInMilliseconds = 24 * 60 * 60 * 1000)
        #set($currentEpochMillis = $util.time.nowEpochMilliSeconds())
        #set($oneDayLaterEpochMillis = $currentEpochMillis + $oneDayInMilliseconds)
        #set($oneDayLaterDate = $util.time.epochMilliSecondsToFormatted($oneDayLaterEpochMillis, "yyyy-MM-dd"))
        
        ##$util.log.info("One day later date: ")
        ##$util.log.info($oneDayLaterDate)
        
        #set($sevenDaysInMilliSeconds = 7 * 24 * 60 * 60 * 1000) ## 7 days in milliseconds
        
        ##$util.log.info("sevenDaysInMilliSeconds")
        ##$util.log.info($sevenDaysInMilliSeconds)
        
        #set($sevenDaysAgoEpochMillis = $currentEpochMillis - $sevenDaysInMilliSeconds)
        
        ##$util.log.info("sevenDaysAgoEpochMillis")
        ##$util.log.info($sevenDaysAgoEpochMillis)
        
        #set($startDate = $util.time.epochMilliSecondsToFormatted($sevenDaysAgoEpochMillis, "yyyy-MM-dd"))
  
        ##$util.log.info("startDate")
        ##$util.log.info($startDate)
  
        $util.qr($expressionValues.put(":startDate", { "S": $startDate }))
        $util.qr($expressionValues.put(":endDate", { "S": $oneDayLaterDate }))

        #set($index = $tenantId + '-Index')
        ##$utils.log.info($tenantId)
        ##$utils.log.info($index)
        {
          "version": "2018-05-29",
          "operation": "Query",
          "index": "$index",
          "query": {
            "expression": "tenantId = :tenantId AND updatedAt BETWEEN :startDate AND :endDate",
            "expressionValues": $util.toJson($expressionValues)
          },
          "filter": {
            "expression": "contains(owners, :owner)",
            "expressionValues": $util.toJson({ ":owner": { "S": "$owner" } })
          },
          "scanIndexForward": $sortDirection,
          "limit": $util.defaultIfNull($ctx.args.limit, 10),
          "nextToken": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null))
        }
      #else
        $util.error("tenantId or owner is null. Aborting query.")
        $util.abort()
      #end